/*
This File contains parameters that can be changed to configure the pipeline
*/

// Max resource options
// Defaults only, expecting to be overwritten
params.max_memory                 = '100.GB'
params.max_cpus                   = 16
params.max_time                   = '24.h'


// Required Pipeline Config Settings
params.sample_sheet = '/path/to/samplesheet.csv'

params.project_name = 'DEFAULT_PROJECT_NAME'

params.publish_dir_mode = 'defualt' // Options: 'defualt', copy', 'symlink', 'link'  Note: Defualt recommended (copy, exept on resume). When using link (Hardlink) output dir and work dir must be on the same filesystem 

params.workflow_opt = 'cleaup_se' // (cleaup_se, multiqc)


// Short Read Settings

params.fastp_q = '20'  // Average Q score for fastp - Short read Only

params.fastp_minlen = '60'

/*
Select Steps (True = Run Aditional Step, False = Don't run it):
*/

//Adapter trimmer choice (Chose one of BBMAP, SCYTHE, CUTADAPT, COMBINED_FASTP)
//params.trimmer = 'BBMAP'

//Quality trimmer choice (Chose one of SICKLE, FASTP, NONE) - Choose None if used COMBINED_FASTP or if you do not want to quality trim sequences.
//params.trimmer = 'SICKLE'



// Additional BBDUK params

params.bbduk_ktrim = 'r'
params.bbduk_hdist = '1'
params.bbduk_additional_args = ''

// Additional SICKLE params

params.sickle_type =  'illumina'
params.sickle_qual = '20'
params.sickle_len = '50'
params.sickle_additional_args = ''



// Adapter Sequences

// Fasta of Adapter/Index Sequences
params.adapters_fasta = 'https://raw.githubusercontent.com/edwardbirdlab/contam/refs/heads/main/element_aviti_concat.fasta'

// TSV of Adapter/Index Sequences
params.adapter_tsv = 'http://raw.githubusercontent.com/edwardbirdlab/contam/refs/heads/main/element_aviti_concat.tsv'


// Load base.config by default for all pipelines
includeConfig 'configs/base_config.cfg'


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}